<style>
  #analysisDrawer::part(header) {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
  }
  #analysisDrawer::part(title) {
    color: white;
  }
  #analysisDrawer::part(close-button) {
    color: white;
  }
  #analysisDrawer::part(close-button):hover {
    color: rgba(255, 255, 255, 0.8);
  }
</style>

<div class="space-y-8">
  <!-- Header -->
  <div>
    <h1 class="text-3xl font-bold text-gray-900">Community Intelligence</h1>
    <p class="mt-2 text-gray-600">Search and analyze community feedback across Discord, Reddit, X, and LinkedIn</p>
  </div>

  <!-- Quick Stats -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0 bg-indigo-100 rounded-md p-3">
          <sl-icon name="inboxes" class="text-2xl text-indigo-600"></sl-icon>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Open Tasks</p>
          <p id="openTasksCount" class="text-2xl font-semibold text-gray-900">-</p>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0 bg-green-100 rounded-md p-3">
          <sl-icon name="check-circle" class="text-2xl text-green-600"></sl-icon>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">Completed Today</p>
          <p id="completedTodayCount" class="text-2xl font-semibold text-gray-900">-</p>
        </div>
      </div>
    </div>

    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex items-center">
        <div class="flex-shrink-0 bg-yellow-100 rounded-md p-3">
          <sl-icon name="exclamation-triangle" class="text-2xl text-yellow-600"></sl-icon>
        </div>
        <div class="ml-4">
          <p class="text-sm font-medium text-gray-500">High Priority</p>
          <p id="highPriorityCount" class="text-2xl font-semibold text-gray-900">-</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Ask Section -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center gap-2 mb-4">
      <h2 class="text-xl font-semibold">Ask Claude - Deep Community Analysis</h2>
      <sl-tooltip id="askParamsTooltip" content="No analysis yet" placement="right">
        <sl-icon name="info-circle" class="text-gray-400 cursor-help"></sl-icon>
      </sl-tooltip>
    </div>
    <p class="text-sm text-gray-600 mb-4">Ask questions about community feedback and get AI-powered insights with configurable depth</p>

    <form id="askForm" class="space-y-4">
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Your Question</label>
        <sl-textarea
          id="askQuestion"
          placeholder="What are developers saying about collaboration features? What are the top feature requests? What pain points are mentioned most?"
          rows="3"
          resize="auto"
        ></sl-textarea>
      </div>

      <div class="space-y-4">
        <!-- First row: Analysis Depth, Time Range -->
        <div class="flex items-center gap-4 flex-wrap">
          <sl-select id="analysisDepth" value="standard" style="min-width: 200px; width: auto;">
            <sl-option value="quick">Quick (10 results)</sl-option>
            <sl-option value="standard">Standard (25 results)</sl-option>
            <sl-option value="deep">Deep (50 results)</sl-option>
            <sl-option value="comprehensive">Comprehensive (100 results)</sl-option>
          </sl-select>

          <sl-select id="timeRange" value="all" style="min-width: 150px; width: auto;">
            <sl-option value="7">Last 7 days</sl-option>
            <sl-option value="30">Last 30 days</sl-option>
            <sl-option value="90">Last 90 days</sl-option>
            <sl-option value="180">Last 6 months</sl-option>
            <sl-option value="365">Last year</sl-option>
            <sl-option value="custom">Custom range</sl-option>
            <sl-option value="all">All time</sl-option>
          </sl-select>
        </div>

        <!-- Custom Date Range (hidden by default) -->
        <div id="customDateRange" class="hidden flex items-center gap-4 flex-wrap">
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">From</label>
            <sl-input id="askStartDate" type="date" style="min-width: 150px;"></sl-input>
          </div>
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">To</label>
            <sl-input id="askEndDate" type="date" style="min-width: 150px;"></sl-input>
          </div>
        </div>

        <!-- Second row: Checkboxes, Recent, and Analyze button -->
        <div class="flex items-center justify-between gap-4 flex-wrap">
          <div class="flex items-center gap-4 flex-wrap">
            <sl-checkbox id="includePatterns">Identify Patterns</sl-checkbox>
            <sl-checkbox id="includeTrends">Analyze Trends</sl-checkbox>
          </div>

          <div class="flex items-center gap-4">
            <sl-dropdown id="historyDropdown" distance="4">
              <sl-button slot="trigger" size="large" caret>
                <sl-icon slot="prefix" name="clock-history"></sl-icon>
                Recent
              </sl-button>
              <sl-menu id="historyMenu">
                <sl-menu-item disabled>Loading...</sl-menu-item>
              </sl-menu>
            </sl-dropdown>

            <sl-button type="submit" variant="primary" size="large">
              <sl-icon slot="prefix" name="chat-dots"></sl-icon>
              Analyze with Claude
            </sl-button>
          </div>
        </div>
      </div>

      <!-- Status Container -->
      <div id="askStatus" class="hidden mt-4 p-4 bg-indigo-50 border border-indigo-200 rounded-lg">
        <div class="flex items-center justify-between gap-3">
          <div class="flex items-center gap-3 flex-1">
            <sl-spinner style="font-size: 1.5rem;"></sl-spinner>
            <div class="flex-1">
              <p id="askStatusText" class="text-sm font-medium text-indigo-900">Preparing analysis...</p>
              <p id="askStatusDetail" class="text-xs text-indigo-700 mt-1"></p>
              <p id="askStatusModel" class="text-xs text-indigo-600 mt-1 font-mono"></p>
            </div>
          </div>
          <sl-button id="toggleStatusLog" size="small" variant="text" circle>
            <sl-icon name="chevron-down"></sl-icon>
          </sl-button>
        </div>
        <div id="statusLog" class="hidden mt-3 pt-3 border-t border-indigo-300 max-h-64 overflow-y-auto">
          <div id="statusLogItems" class="space-y-2"></div>
        </div>
      </div>
    </form>
  </div>

  <!-- Search Section -->
  <div class="bg-white rounded-lg shadow p-6">
    <div class="flex items-center gap-2 mb-4">
      <h2 class="text-xl font-semibold">Semantic Search</h2>
      <sl-tooltip id="searchParamsTooltip" content="No search yet" placement="right">
        <sl-icon name="info-circle" class="text-gray-400 cursor-help"></sl-icon>
      </sl-tooltip>
    </div>
    <form id="searchForm" class="space-y-4">
      <div class="flex gap-4 items-end">
        <div class="flex-1">
          <sl-input
            id="searchQuery"
            placeholder="Search community content..."
            size="large"
            clearable
          ></sl-input>
        </div>

        <sl-button type="submit" variant="primary" size="large">
          <sl-icon slot="prefix" name="search"></sl-icon>
          Search
        </sl-button>
      </div>

      <div class="space-y-4">
        <div class="flex gap-4 flex-wrap">
          <sl-select id="limitSelect" value="10" style="min-width: 150px; width: auto;">
            <sl-option value="5">5 results</sl-option>
            <sl-option value="10">10 results</sl-option>
            <sl-option value="20">20 results</sl-option>
            <sl-option value="50">50 results</sl-option>
          </sl-select>

          <sl-select id="searchTimeRange" value="all" style="min-width: 150px; width: auto;">
            <sl-option value="7">Last 7 days</sl-option>
            <sl-option value="30">Last 30 days</sl-option>
            <sl-option value="90">Last 90 days</sl-option>
            <sl-option value="180">Last 6 months</sl-option>
            <sl-option value="365">Last year</sl-option>
            <sl-option value="custom">Custom range</sl-option>
            <sl-option value="all">All time</sl-option>
          </sl-select>
        </div>

        <!-- Custom Date Range for Search (hidden by default) -->
        <div id="searchCustomDateRange" class="hidden flex items-center gap-4 flex-wrap">
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">From</label>
            <sl-input id="searchStartDate" type="date" style="min-width: 150px;"></sl-input>
          </div>
          <div>
            <label class="block text-xs font-medium text-gray-700 mb-1">To</label>
            <sl-input id="searchEndDate" type="date" style="min-width: 150px;"></sl-input>
          </div>
        </div>
      </div>
    </form>

    <div id="searchResults" class="mt-6"></div>
  </div>

  <!-- Claude Analysis Drawer -->
  <sl-drawer id="analysisDrawer" placement="end" style="--size: 60vw;">
    <div slot="label" id="drawerLabel" class="flex items-center gap-2">
      <span id="drawerTitle">Claude Analysis</span>
      <sl-badge id="drawerBadge" variant="neutral" pill style="display: none;">0 sources</sl-badge>
      <sl-button id="generateTasksBtn" size="small" variant="primary" style="display: none; margin-left: auto;">
        <sl-icon slot="prefix" name="list-task"></sl-icon>
        Generate Tasks
      </sl-button>
    </div>

    <!-- Task Suggestions Container -->
    <div id="taskSuggestionsContainer" class="hidden mb-6 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div class="flex items-center justify-between mb-3">
        <h3 class="text-lg font-semibold text-gray-900">Suggested Engagement Tasks</h3>
        <sl-badge id="taskCountBadge" variant="primary" pill>0</sl-badge>
      </div>
      <div id="taskSuggestionsList" class="space-y-3"></div>
    </div>

    <!-- Analysis Report Container -->
    <div id="analysisReportContainer" class="hidden mb-6">
      <sl-details>
        <div slot="summary" class="flex items-center gap-2">
          <sl-icon name="graph-up"></sl-icon>
          <span class="font-medium">Detailed Analysis Report</span>
          <sl-badge id="reportSourceCount" variant="neutral" pill>0 sources</sl-badge>
        </div>

        <div class="mt-3 space-y-3">
          <!-- Summary Stats -->
          <div class="p-3 bg-blue-50 rounded border border-blue-200">
            <div class="grid grid-cols-3 gap-4 text-center text-sm">
              <div>
                <div class="font-semibold text-gray-900" id="reportTotalSources">-</div>
                <div class="text-xs text-gray-600">Sources Analyzed</div>
              </div>
              <div>
                <div class="font-semibold text-green-600" id="reportTasksGenerated">-</div>
                <div class="text-xs text-gray-600">Tasks Generated</div>
              </div>
              <div>
                <div class="font-semibold text-indigo-600" id="reportConversionRate">-%</div>
                <div class="text-xs text-gray-600">Conversion Rate</div>
              </div>
            </div>
          </div>

          <!-- Filter Buttons -->
          <div class="flex gap-2">
            <sl-button size="small" id="reportFilterAll" variant="default">All</sl-button>
            <sl-button size="small" id="reportFilterTasks" variant="success">Tasks Only</sl-button>
            <sl-button size="small" id="reportFilterSkipped" variant="neutral">Skipped Only</sl-button>
          </div>

          <!-- Report Table -->
          <div id="reportTableContainer" class="overflow-x-auto">
            <table class="w-full text-xs">
              <thead class="bg-gray-100 sticky top-0">
                <tr>
                  <th class="px-2 py-2 text-left">Score</th>
                  <th class="px-2 py-2 text-left">Platform</th>
                  <th class="px-2 py-2 text-left">Author</th>
                  <th class="px-2 py-2 text-left">Reasoning</th>
                  <th class="px-2 py-2 text-left">Link</th>
                </tr>
              </thead>
              <tbody id="reportTableBody"></tbody>
            </table>
          </div>
        </div>
      </sl-details>
    </div>

    <!-- Task Generation Status -->
    <div id="taskGenerationStatus" class="hidden mb-6 p-4 bg-indigo-50 rounded-lg border border-indigo-200">
      <div class="flex items-center gap-3">
        <sl-spinner style="font-size: 1.5rem;"></sl-spinner>
        <div>
          <p id="taskGenStatusText" class="text-sm font-medium text-indigo-900">Analyzing sources...</p>
          <p id="taskGenStatusDetail" class="text-xs text-indigo-700 mt-1"></p>
        </div>
      </div>
    </div>

    <div id="drawerContent" class="prose prose-sm max-w-none"></div>
  </sl-drawer>

  <!-- Conversation History Modal -->
  <sl-dialog id="historyModal" label="Conversation History" style="--width: 900px;">
    <div class="space-y-4">
      <!-- Search and Filters -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <sl-input id="historySearch" placeholder="Search conversations..." clearable>
          <sl-icon slot="prefix" name="search"></sl-icon>
        </sl-input>

        <sl-select id="historyDepthFilter" placeholder="All Depths" clearable>
          <sl-option value="">All Depths</sl-option>
          <sl-option value="quick">Quick</sl-option>
          <sl-option value="standard">Standard</sl-option>
          <sl-option value="deep">Deep</sl-option>
          <sl-option value="comprehensive">Comprehensive</sl-option>
        </sl-select>

        <sl-button id="searchHistoryBtn" variant="primary">
          <sl-icon slot="prefix" name="search"></sl-icon>
          Search
        </sl-button>
      </div>

      <!-- Conversation List -->
      <div id="historyList" class="max-h-96 overflow-y-auto">
        <div class="text-center py-8">
          <sl-spinner></sl-spinner>
          <p class="mt-2 text-gray-500">Loading conversations...</p>
        </div>
      </div>
    </div>
  </sl-dialog>
</div>

<script>
  // Connect to Socket.IO
  const socket = io();
  let statusLogArray = [];

  // Listen for analysis status updates
  socket.on('analysis:status', (data) => {
    console.log('Status update:', data);

    // Add to log array
    statusLogArray.push(data);

    // Update current status display
    document.getElementById('askStatusText').textContent = data.message;
    document.getElementById('askStatusDetail').textContent = data.detail || '';
    document.getElementById('askStatusModel').textContent = data.model ? `Model: ${data.model}` : '';

    // Update log
    const logItems = document.getElementById('statusLogItems');
    const timestamp = new Date(data.timestamp).toLocaleTimeString();
    const logItem = document.createElement('div');
    logItem.className = 'text-xs p-2 bg-white rounded border border-indigo-200';
    logItem.innerHTML = `
      <div class="flex items-center justify-between">
        <span class="font-medium text-indigo-900">${data.message}</span>
        <span class="text-indigo-600">${timestamp}</span>
      </div>
      ${data.detail ? `<div class="text-indigo-700 mt-1">${data.detail}</div>` : ''}
      ${data.model ? `<div class="text-indigo-600 font-mono mt-1">${data.model}</div>` : ''}
    `;
    logItems.appendChild(logItem);

    // Auto-scroll to bottom
    document.getElementById('statusLog').scrollTop = document.getElementById('statusLog').scrollHeight;
  });

  // Toggle status log
  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('toggleStatusLog')?.addEventListener('click', () => {
      const log = document.getElementById('statusLog');
      const icon = document.querySelector('#toggleStatusLog sl-icon');
      if (log.classList.contains('hidden')) {
        log.classList.remove('hidden');
        icon.name = 'chevron-up';
      } else {
        log.classList.add('hidden');
        icon.name = 'chevron-down';
      }
    });
  });

  // Load task stats
  async function loadTaskStats() {
    try {
      const response = await fetch('/api/tasks/stats', { credentials: 'include' });
      const data = await response.json();
      if (data.success) {
        document.getElementById('openTasksCount').textContent = data.stats.open;
        document.getElementById('completedTodayCount').textContent = data.stats.completedToday;
        document.getElementById('highPriorityCount').textContent = data.stats.highPriority;
      }
    } catch (error) {
      console.error('Error loading task stats:', error);
    }
  }

  // Socket.IO for real-time updates (use existing socket from layout if available)
  if (typeof io !== 'undefined') {
    const indexSocket = io();
    indexSocket.on('task:created', () => loadTaskStats());
    indexSocket.on('task:updated', () => loadTaskStats());
  }

  // Search form handler
  document.getElementById('searchForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const query = document.getElementById('searchQuery').value;
    const limit = document.getElementById('limitSelect').value;
    const searchTimeRange = document.getElementById('searchTimeRange').value;

    if (!query) {
      showToast('Please enter a search query', 'warning', 'exclamation-triangle');
      return;
    }

    const resultsDiv = document.getElementById('searchResults');
    resultsDiv.innerHTML = '<sl-spinner></sl-spinner> Searching...';

    // Build filter object for tooltip
    const filters = {};

    // Add time range filter
    if (searchTimeRange === 'custom') {
      const startDateInput = document.getElementById('searchStartDate').value;
      const endDateInput = document.getElementById('searchEndDate').value;
      if (startDateInput) {
        filters.startDate = new Date(startDateInput).toISOString();
      }
      if (endDateInput) {
        const endDate = new Date(endDateInput);
        endDate.setHours(23, 59, 59, 999);
        filters.endDate = endDate.toISOString();
      }
    } else if (searchTimeRange !== 'all') {
      const days = parseInt(searchTimeRange);
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);
      filters.startDate = startDate.toISOString();
    }

    // Build Chroma where clause visualization
    let whereClause = {};
    if (filters.startDate && filters.endDate) {
      const startUnix = Math.floor(new Date(filters.startDate).getTime() / 1000);
      const endUnix = Math.floor(new Date(filters.endDate).getTime() / 1000);
      whereClause = {
        $and: [
          { timestamp_unix: { $gte: startUnix } },
          { timestamp_unix: { $lte: endUnix } }
        ]
      };
    } else if (filters.startDate) {
      const startUnix = Math.floor(new Date(filters.startDate).getTime() / 1000);
      whereClause = { timestamp_unix: { $gte: startUnix } };
    } else if (filters.endDate) {
      const endUnix = Math.floor(new Date(filters.endDate).getTime() / 1000);
      whereClause = { timestamp_unix: { $lte: endUnix } };
    }

    let timeFilterDesc = 'none';
    if (searchTimeRange === 'custom') {
      const parts = [];
      if (filters.startDate) parts.push(`from ${new Date(filters.startDate).toLocaleDateString()}`);
      if (filters.endDate) parts.push(`to ${new Date(filters.endDate).toLocaleDateString()}`);
      timeFilterDesc = parts.join(' ');
    } else if (searchTimeRange !== 'all') {
      timeFilterDesc = `Last ${searchTimeRange} days`;
    }

    const tooltipContent = `Query: "${query.toLowerCase()}"
Limit: ${limit}
Time Filter: ${timeFilterDesc}
Where: ${Object.keys(whereClause).length > 0 ? JSON.stringify(whereClause, null, 2) : 'none'}`;

    document.getElementById('searchParamsTooltip').content = tooltipContent;

    try {
      const response = await fetch('/api/search', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          query,
          limit,
          filters
        })
      });

      const data = await response.json();

      if (data.success && data.results.length > 0) {
        resultsDiv.innerHTML = `
          <h3 class="font-semibold mb-3">Found ${data.count} results</h3>
          ${data.results.map(result => `
            <div class="border rounded-lg p-4 mb-3">
              <div class="flex items-center justify-between mb-2">
                <div class="flex items-center gap-2">
                  <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">${result.metadata.platform || 'Unknown'}</span>
                  ${result.metadata.timestamp ? `<span class="text-xs text-gray-500">${new Date(result.metadata.timestamp).toLocaleDateString()}</span>` : ''}
                </div>
                <span class="text-xs text-gray-500">Relevance: ${(result.relevanceScore * 100).toFixed(1)}%</span>
              </div>
              <p class="text-sm text-gray-700">${result.content}</p>
              <div class="mt-2 flex items-center gap-2">
                ${result.metadata.author ? `<span class="text-xs text-gray-500">By ${result.metadata.author}</span>` : ''}
                ${result.metadata.deeplink ? `
                  <a href="${result.metadata.deeplink}" target="_blank" rel="noopener noreferrer" class="text-xs text-blue-600 hover:text-blue-800 underline flex items-center gap-1">
                    <sl-icon name="box-arrow-up-right" style="font-size: 10px;"></sl-icon>
                    View Source
                  </a>
                ` : ''}
              </div>
            </div>
          `).join('')}
        `;
      } else {
        resultsDiv.innerHTML = '<p class="text-gray-500">No results found</p>';
      }
    } catch (error) {
      resultsDiv.innerHTML = '<p class="text-red-600">Error performing search</p>';
      console.error('Search error:', error);
    }
  });

  // Ask form handler
  document.getElementById('askForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const question = document.getElementById('askQuestion').value;
    if (!question) {
      showToast('Please enter a question', 'warning', 'exclamation-triangle');
      return;
    }

    // Get analysis parameters
    const analysisDepth = document.getElementById('analysisDepth').value;
    const timeRange = document.getElementById('timeRange').value;
    const includePatterns = document.getElementById('includePatterns').checked;
    const includeTrends = document.getElementById('includeTrends').checked;

    // Map depth to result count
    const depthMap = {
      quick: 10,
      standard: 25,
      deep: 50,
      comprehensive: 100
    };
    const contextLimit = depthMap[analysisDepth] || 25;

    // Show loading state in button and status
    const submitBtn = document.querySelector('#askForm sl-button[type="submit"]');
    const originalBtnContent = submitBtn.innerHTML;
    submitBtn.loading = true;

    // Show status container and clear log
    const statusDiv = document.getElementById('askStatus');
    statusDiv.classList.remove('hidden');
    document.getElementById('statusLogItems').innerHTML = '';
    statusLogArray = [];
    document.getElementById('statusLog').classList.add('hidden');
    document.querySelector('#toggleStatusLog sl-icon').name = 'chevron-down';

    try {
      const requestBody = {
        question,
        contextLimit,
        includePatterns,
        includeTrends,
        filters: {}
      };

      // Add time range filter
      if (timeRange === 'custom') {
        const startDateInput = document.getElementById('askStartDate').value;
        const endDateInput = document.getElementById('askEndDate').value;
        if (startDateInput) {
          requestBody.filters.startDate = new Date(startDateInput).toISOString();
        }
        if (endDateInput) {
          const endDate = new Date(endDateInput);
          endDate.setHours(23, 59, 59, 999);
          requestBody.filters.endDate = endDate.toISOString();
        }
      } else if (timeRange !== 'all') {
        const days = parseInt(timeRange);
        const startDate = new Date();
        startDate.setDate(startDate.getDate() - days);
        requestBody.filters.startDate = startDate.toISOString();
      }

      const response = await fetch('/api/ask', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(requestBody)
      });

      const data = await response.json();

      // Update tooltip with actual query params after response
      let timeFilterDesc = 'none';
      if (timeRange === 'custom') {
        const parts = [];
        if (requestBody.filters.startDate) parts.push(`from ${new Date(requestBody.filters.startDate).toLocaleDateString()}`);
        if (requestBody.filters.endDate) parts.push(`to ${new Date(requestBody.filters.endDate).toLocaleDateString()}`);
        timeFilterDesc = parts.join(' ');
      } else if (timeRange !== 'all') {
        timeFilterDesc = `Last ${timeRange} days`;
      }

      const tooltipContent = `Query: "${question.toLowerCase()}"
Limit: ${contextLimit}
Time Filter: ${timeFilterDesc}
Patterns: ${includePatterns}
Trends: ${includeTrends}`;

      document.getElementById('askParamsTooltip').content = tooltipContent;

      if (data.success) {
        // Load the saved conversation from MongoDB to ensure consistency
        await loadConversation(data.conversationId);

        // Hide status and remove button loading state
        document.getElementById('askStatus').classList.add('hidden');
        submitBtn.loading = false;
      } else {
        // Hide status, remove button loading state and show error
        document.getElementById('askStatus').classList.add('hidden');
        submitBtn.loading = false;
        showToast('Error processing question: ' + (data.error || 'Unknown error'), 'danger', 'exclamation-triangle');
      }
    } catch (error) {
      // Hide status, remove button loading state and show error
      document.getElementById('askStatus').classList.add('hidden');
      submitBtn.loading = false;
      showToast('Error asking Claude: ' + error.message, 'danger', 'exclamation-triangle');
      console.error('Ask error:', error);
    }
  });

  // Load conversation history
  async function loadRecentConversations() {
    try {
      console.log('Loading recent conversations...');
      const response = await fetch('/api/conversations/recent?limit=10', { credentials: 'include' });
      console.log('Response status:', response.status, response.statusText);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('Recent conversations response:', data);

      const menu = document.getElementById('historyMenu');
      if (!menu) {
        console.error('History menu element not found');
        return;
      }

      if (data.success && data.conversations && data.conversations.length > 0) {
        menu.innerHTML = data.conversations.map(conv => `
          <sl-menu-item value="${conv._id}" data-conversation-id="${conv._id}">
            <div class="text-sm">
              <div class="font-medium">${conv.title}</div>
              <div class="text-xs text-gray-500">${new Date(conv.createdAt).toLocaleDateString()}</div>
            </div>
          </sl-menu-item>
        `).join('') + `
          <sl-divider></sl-divider>
          <sl-menu-item id="viewAllMenuItem">
            <sl-icon slot="prefix" name="list"></sl-icon>
            View All...
          </sl-menu-item>
        `;
        console.log(`Loaded ${data.conversations.length} conversations`);
      } else {
        menu.innerHTML = '<sl-menu-item disabled>No conversations yet</sl-menu-item>';
        console.log('No conversations found');
      }
    } catch (error) {
      console.error('Error loading conversations:', error);
      const menu = document.getElementById('historyMenu');
      if (menu) {
        menu.innerHTML = '<sl-menu-item disabled>Error loading</sl-menu-item>';
      }
    }
  }

  async function loadConversation(id) {
    try {
      console.log('Loading conversation:', id);
      const response = await fetch(`/api/conversations/${id}`, { credentials: 'include' });
      console.log('Conversation response status:', response.status);
      const data = await response.json();
      console.log('Conversation data:', data);

      if (data.success) {
        const conv = data.conversation;
        const renderedHtml = marked.parse(conv.answer);

        // Populate drawer content
        const drawerContent = document.getElementById('drawerContent');
        drawerContent.innerHTML = `
          <div class="mb-4">
            <div class="mb-3 p-3 bg-gray-50 rounded border border-gray-200">
              <p class="text-sm font-medium text-gray-700">Question:</p>
              <p class="text-sm text-gray-600 mt-1">${conv.question}</p>
            </div>
            <div class="prose prose-sm max-w-none">${renderedHtml}</div>
            ${conv.log && conv.log.length > 0 ? `
              <div class="mt-4 pt-4 border-t border-gray-200">
                <details class="text-sm">
                  <summary class="cursor-pointer text-indigo-700 font-medium hover:text-indigo-800">
                    View processing log (${conv.log.length} steps)
                  </summary>
                  <div class="mt-2 space-y-2 max-h-64 overflow-y-auto">
                    ${conv.log.map(entry => `
                      <div class="text-xs p-2 bg-indigo-50 rounded border border-indigo-200">
                        <div class="flex items-center justify-between">
                          <span class="font-medium text-indigo-900">${entry.message}</span>
                          <span class="text-indigo-600">${new Date(entry.timestamp).toLocaleTimeString()}</span>
                        </div>
                        ${entry.detail ? `<div class="text-indigo-700 mt-1">${entry.detail}</div>` : ''}
                        ${entry.model ? `<div class="text-indigo-600 font-mono mt-1">${entry.model}</div>` : ''}
                      </div>
                    `).join('')}
                  </div>
                </details>
              </div>
            ` : ''}
            ${conv.sources && conv.sources.length > 0 ? `
              <div class="mt-4 pt-4 border-t border-gray-200">
                <details class="text-sm">
                  <summary class="cursor-pointer text-indigo-700 font-medium hover:text-indigo-800">
                    View ${conv.sources.length} source references
                  </summary>
                  <div class="mt-2 space-y-2">
                    ${conv.sources.slice(0, 10).map(s => `
                      <div class="text-xs p-2 bg-gray-50 rounded">
                        <div class="flex items-center justify-between mb-1">
                          <span class="inline-block bg-blue-100 text-blue-800 px-2 py-0.5 rounded">${s.platform || 'Unknown'}</span>
                          ${s.relevanceScore ? `<span class="text-gray-600">Relevance: ${(s.relevanceScore * 100).toFixed(0)}%</span>` : ''}
                        </div>
                        ${s.deeplink ? `<a href="${s.deeplink}" target="_blank" class="text-indigo-600 hover:text-indigo-800 underline text-xs">View source →</a>` : ''}
                      </div>
                    `).join('')}
                    ${conv.sources.length > 10 ? `<p class="text-xs text-gray-500">... and ${conv.sources.length - 10} more sources</p>` : ''}
                  </div>
                </details>
              </div>
            ` : ''}
            <div class="mt-4 pt-4 border-t border-gray-200 text-xs text-gray-500">
              Created ${new Date(conv.createdAt).toLocaleString()}
              ${conv.createdBy ? ` by ${conv.createdBy.name}` : ''}
            </div>
          </div>
        `;

        // Update drawer title and badge
        const drawer = document.getElementById('analysisDrawer');
        console.log('Drawer element:', drawer);
        document.getElementById('drawerTitle').textContent = conv.title;
        const badge = document.getElementById('drawerBadge');
        badge.textContent = `${conv.sourcesAnalyzed || 0} sources`;
        badge.style.display = 'inline-block';

        // Store current conversation ID globally
        window.currentConversationId = conv._id;

        // Show Generate Tasks button or display existing tasks
        const genTasksBtn = document.getElementById('generateTasksBtn');
        if (conv.suggestedTasks && conv.suggestedTasks.length > 0) {
          displaySuggestedTasks(conv.suggestedTasks);
          genTasksBtn.style.display = 'none';

          // Display analysis report if available
          if (conv.taskGenerationReport && conv.taskGenerationReport.length > 0) {
            displayAnalysisReport(conv.taskGenerationReport, conv.suggestedTasks.length);
          }
        } else {
          genTasksBtn.style.display = 'inline-flex';
          document.getElementById('taskSuggestionsContainer').classList.add('hidden');
          document.getElementById('analysisReportContainer').classList.add('hidden');
        }

        // Close history modal if open
        const historyModal = document.getElementById('historyModal');
        if (historyModal) {
          historyModal.hide();
        }

        // Open the drawer
        console.log('Opening drawer...');
        drawer.show();
        console.log('Drawer opened');

        console.log('Conversation loaded successfully');
      }
    } catch (error) {
      console.error('Error loading conversation:', error);
      showToast('Error loading conversation', 'danger', 'exclamation-triangle');
    }
  }

  function showHistoryModal() {
    const modal = document.getElementById('historyModal');
    modal.show();
    searchHistory();
  }

  async function searchHistory() {
    const searchQuery = document.getElementById('historySearch').value;
    const depthFilter = document.getElementById('historyDepthFilter').value;

    const params = new URLSearchParams();
    if (searchQuery) params.append('q', searchQuery);
    if (depthFilter) params.append('analysisDepth', depthFilter);
    params.append('limit', '50');

    const historyList = document.getElementById('historyList');
    historyList.innerHTML = '<div class="text-center py-8"><sl-spinner></sl-spinner></div>';

    try {
      const response = await fetch(`/api/conversations/search?${params.toString()}`, { credentials: 'include' });
      const data = await response.json();

      if (data.success && data.conversations.length > 0) {
        historyList.innerHTML = data.conversations.map(conv => `
          <div class="border rounded-lg p-4 mb-3 hover:bg-gray-50 cursor-pointer" data-conversation-id="${conv._id}">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <h4 class="font-semibold text-gray-900">${conv.title}</h4>
                <p class="text-sm text-gray-600 mt-1">${conv.question}</p>
                <div class="flex gap-2 mt-2">
                  <span class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded">${conv.analysisDepth}</span>
                  <span class="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded">${conv.sourcesAnalyzed || 0} sources</span>
                  ${conv.createdBy ? `<span class="text-xs text-gray-500">by ${conv.createdBy.name}</span>` : ''}
                </div>
              </div>
              <div class="text-xs text-gray-500 ml-4">
                ${new Date(conv.createdAt).toLocaleDateString()}
              </div>
            </div>
          </div>
        `).join('');

        // Add event listeners to conversation items
        historyList.querySelectorAll('[data-conversation-id]').forEach(item => {
          item.addEventListener('click', () => {
            loadConversation(item.dataset.conversationId);
            document.getElementById('historyModal').hide();
          });
        });
      } else {
        historyList.innerHTML = '<p class="text-center text-gray-500 py-8">No conversations found</p>';
      }
    } catch (error) {
      console.error('Error searching conversations:', error);
      historyList.innerHTML = '<p class="text-center text-red-600 py-8">Error loading conversations</p>';
    }
  }

  // Toggle custom date range visibility for Ask Claude
  document.getElementById('timeRange')?.addEventListener('sl-change', (e) => {
    const customDateRange = document.getElementById('customDateRange');
    if (e.target.value === 'custom') {
      customDateRange.classList.remove('hidden');
    } else {
      customDateRange.classList.add('hidden');
    }
  });

  // Toggle custom date range visibility for Search
  document.getElementById('searchTimeRange')?.addEventListener('sl-change', (e) => {
    const searchCustomDateRange = document.getElementById('searchCustomDateRange');
    if (e.target.value === 'custom') {
      searchCustomDateRange.classList.remove('hidden');
    } else {
      searchCustomDateRange.classList.add('hidden');
    }
  });

  // Load counts and history on page load
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded');
    loadTaskStats();
    loadRecentConversations();

    // Add event listener for search history button
    const searchBtn = document.getElementById('searchHistoryBtn');
    if (searchBtn) {
      searchBtn.addEventListener('click', () => {
        searchHistory();
      });
    }

    // Add event listener for history dropdown selections (sl-select is on the dropdown, not menu!)
    const historyDropdown = document.getElementById('historyDropdown');
    if (historyDropdown) {
      console.log('Adding event listener to history dropdown');

      historyDropdown.addEventListener('sl-select', (e) => {
        console.log('sl-select event fired:', e.detail);
        const item = e.detail.item;

        if (item.id === 'viewAllMenuItem') {
          console.log('View All clicked');
          showHistoryModal();
        } else if (item.dataset.conversationId) {
          console.log('Menu item clicked:', item.dataset.conversationId);
          loadConversation(item.dataset.conversationId);
        }
      });
    } else {
      console.error('History dropdown element not found on page load');
    }

    // Add event listener for Generate Tasks button
    const generateTasksBtn = document.getElementById('generateTasksBtn');
    if (generateTasksBtn) {
      generateTasksBtn.addEventListener('click', generateTasks);
    }

    // Add event delegation for task action buttons
    const taskSuggestionsList = document.getElementById('taskSuggestionsList');
    if (taskSuggestionsList) {
      taskSuggestionsList.addEventListener('click', (e) => {
        const createBtn = e.target.closest('.create-task-btn');
        const skipBtn = e.target.closest('.skip-task-btn');

        if (createBtn) {
          const taskIndex = parseInt(createBtn.getAttribute('data-task-index'));
          createTaskFromSuggestion(taskIndex);
        } else if (skipBtn) {
          const taskIndex = parseInt(skipBtn.getAttribute('data-task-index'));
          skipTask(taskIndex);
        }
      });
    }
  });

  // ============= TASK GENERATION FUNCTIONS =============

  async function generateTasks() {
    if (!window.currentConversationId) return;

    const genBtn = document.getElementById('generateTasksBtn');
    genBtn.loading = true;

    document.getElementById('taskGenerationStatus').classList.remove('hidden');

    try {
      const response = await fetch(`/api/conversations/${window.currentConversationId}/generate-tasks`, {
        method: 'POST',
        credentials: 'include'
      });

      const data = await response.json();

      if (data.success) {
        displaySuggestedTasks(data.suggestedTasks);
        genBtn.style.display = 'none';

        // Reload conversation to get the analysis report
        loadConversation(window.currentConversationId);
      } else {
        showToast('Error: ' + (data.error || 'Failed to generate tasks'), 'danger', 'exclamation-triangle');
      }
    } catch (error) {
      console.error('Generate tasks error:', error);
      showToast('Error generating tasks', 'danger', 'exclamation-triangle');
    } finally {
      genBtn.loading = false;
      document.getElementById('taskGenerationStatus').classList.add('hidden');
    }
  }

  function displaySuggestedTasks(tasks) {
    const container = document.getElementById('taskSuggestionsContainer');
    const list = document.getElementById('taskSuggestionsList');
    const badge = document.getElementById('taskCountBadge');

    const pendingTasks = tasks.filter(t => t.status === 'pending');
    badge.textContent = pendingTasks.length;
    container.classList.remove('hidden');

    list.innerHTML = tasks.map((task, index) => `
      <div class="p-3 bg-white rounded border border-gray-300">
        <div class="flex items-center justify-between mb-2">
          <sl-badge variant="${task.shouldEngage ? 'success' : 'neutral'}" pill>
            ${task.shouldEngage ? '✓ Engage' : 'Skip'} (Score: ${task.score}/12)
          </sl-badge>
          <sl-badge variant="neutral">${task.platform}</sl-badge>
        </div>
        <p class="text-xs text-gray-600 mb-2"><strong>${task.author}</strong></p>
        <p class="text-xs text-gray-700 mb-2">${task.reasoning}</p>
        ${task.suggestedResponse ? `
          <div class="mt-2 p-2 bg-gray-50 rounded border border-gray-200">
            <p class="text-xs font-medium text-gray-700 mb-1">Suggested Response:</p>
            <p class="text-xs text-gray-600">${task.suggestedResponse}</p>
          </div>
        ` : ''}
        ${task.sourceDeeplink ? `
          <a href="${task.sourceDeeplink}" target="_blank" class="text-xs text-indigo-600 hover:underline mt-2 inline-block">
            View original post →
          </a>
        ` : ''}
        <div class="mt-3 flex gap-2">
          ${task.status === 'pending' && task.shouldEngage ? `
            <sl-button size="small" variant="primary" class="create-task-btn" data-task-index="${index}">
              <sl-icon slot="prefix" name="plus"></sl-icon>
              Create Task
            </sl-button>
          ` : task.status === 'created' ? `
            <sl-badge variant="success">✓ Task Created</sl-badge>
          ` : ''}
          ${task.status === 'pending' ? `
            <sl-button size="small" variant="default" class="skip-task-btn" data-task-index="${index}">
              Skip
            </sl-button>
          ` : task.status === 'rejected' ? `
            <sl-badge variant="neutral">Skipped</sl-badge>
          ` : ''}
        </div>
      </div>
    `).join('');
  }

  function displayAnalysisReport(report, tasksCount) {
    if (!report || report.length === 0) return;

    const container = document.getElementById('analysisReportContainer');
    const sourceCount = document.getElementById('reportSourceCount');
    const totalSources = document.getElementById('reportTotalSources');
    const tasksGenerated = document.getElementById('reportTasksGenerated');
    const conversionRate = document.getElementById('reportConversionRate');

    // Update summary stats
    sourceCount.textContent = `${report.length} sources`;
    totalSources.textContent = report.length;
    tasksGenerated.textContent = tasksCount;
    conversionRate.textContent = `${Math.round((tasksCount / report.length) * 100)}%`;

    // Sort by score descending
    const sortedReport = [...report].sort((a, b) => b.score - a.score);

    // Store full report for filtering
    window.currentAnalysisReport = sortedReport;

    // Display report
    renderReportTable(sortedReport);

    // Show container
    container.classList.remove('hidden');

    // Add filter event listeners
    document.getElementById('reportFilterAll').addEventListener('click', () => {
      renderReportTable(window.currentAnalysisReport);
    });

    document.getElementById('reportFilterTasks').addEventListener('click', () => {
      const filtered = window.currentAnalysisReport.filter(r => r.shouldEngage);
      renderReportTable(filtered);
    });

    document.getElementById('reportFilterSkipped').addEventListener('click', () => {
      const filtered = window.currentAnalysisReport.filter(r => !r.shouldEngage);
      renderReportTable(filtered);
    });
  }

  function renderReportTable(report) {
    const tbody = document.getElementById('reportTableBody');

    tbody.innerHTML = report.map(item => {
      const scoreColor = item.score >= 9 ? 'bg-green-100 text-green-800' :
                         item.score >= 6 ? 'bg-yellow-100 text-yellow-800' :
                         'bg-gray-100 text-gray-600';

      const engageBadge = item.shouldEngage ?
        '<sl-badge variant="success" size="small" pill>Task</sl-badge>' :
        '<sl-badge variant="neutral" size="small" pill>Skip</sl-badge>';

      return `
        <tr class="border-b hover:bg-gray-50">
          <td class="px-2 py-2">
            <div class="flex items-center gap-2">
              <span class="font-semibold ${scoreColor} px-2 py-1 rounded">${item.score}/12</span>
              ${engageBadge}
            </div>
          </td>
          <td class="px-2 py-2">
            <sl-badge variant="neutral" size="small">${item.platform}</sl-badge>
          </td>
          <td class="px-2 py-2 text-gray-700">${item.author || 'Unknown'}</td>
          <td class="px-2 py-2 text-gray-600">${item.reasoning}</td>
          <td class="px-2 py-2">
            ${item.sourceDeeplink ?
              `<a href="${item.sourceDeeplink}" target="_blank" class="text-indigo-600 hover:underline">
                <sl-icon name="box-arrow-up-right"></sl-icon>
              </a>` :
              '-'}
          </td>
        </tr>
      `;
    }).join('');
  }

  async function createTaskFromSuggestion(taskIndex) {
    try {
      const response = await fetch(`/api/conversations/${window.currentConversationId}/tasks/${taskIndex}/create`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({})
      });

      const data = await response.json();

      if (data.success) {
        showToast('Task created successfully!', 'success', 'check-circle');
        await loadConversation(window.currentConversationId);
      } else {
        showToast('Error: ' + (data.error || 'Failed to create task'), 'danger', 'exclamation-triangle');
      }
    } catch (error) {
      console.error('Create task error:', error);
      showToast('Error creating task', 'danger', 'exclamation-triangle');
    }
  }

  async function skipTask(taskIndex) {
    try {
      const response = await fetch(`/api/conversations/${window.currentConversationId}/tasks/${taskIndex}`, {
        method: 'DELETE',
        credentials: 'include'
      });

      const data = await response.json();

      if (data.success) {
        await loadConversation(window.currentConversationId);
      }
    } catch (error) {
      console.error('Skip task error:', error);
    }
  }

  // Listen for task generation Socket.IO events
  socket.on('task-generation:started', (data) => {
    if (data.userId === '<%= user._id %>') {
      document.getElementById('taskGenStatusText').textContent = 'Analyzing sources...';
      document.getElementById('taskGenStatusDetail').textContent = `Processing ${data.totalSources} high-relevance sources`;
    }
  });

  socket.on('task-generation:progress', (data) => {
    if (data.userId === '<%= user._id %>') {
      document.getElementById('taskGenStatusText').textContent = `Analyzing source ${data.current} of ${data.total}`;
      document.getElementById('taskGenStatusDetail').textContent = `${data.platform} - ${data.author}`;
    }
  });

  socket.on('task-generation:complete', (data) => {
    if (data.userId === '<%= user._id %>') {
      document.getElementById('taskGenStatusText').textContent = 'Analysis complete!';
      document.getElementById('taskGenStatusDetail').textContent = `Generated ${data.tasksGenerated} task suggestions`;
      setTimeout(() => {
        document.getElementById('taskGenerationStatus').classList.add('hidden');
      }, 2000);
    }
  });

  socket.on('task-generation:error', (data) => {
    if (data.userId === '<%= user._id %>') {
      document.getElementById('taskGenerationStatus').classList.add('hidden');
      showToast('Error generating tasks: ' + data.error, 'danger', 'exclamation-triangle');
    }
  });
</script>
