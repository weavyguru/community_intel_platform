<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= typeof title !== 'undefined' ? title : 'Community Intelligence Platform' %></title>

  <!-- Tailwind CSS -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- Shoelace Web Components -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/themes/light.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/components/icon/icon.css" />
  <script type="module" src="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.12.0/cdn/shoelace.js"></script>

  <!-- Custom Styles -->
  <link rel="stylesheet" href="/css/styles.css">

  <!-- Marked.js for Markdown rendering -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <!-- Socket.IO -->
  <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-50">
  <%- include('../partials/topnav') %>

  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <%- body %>
  </main>

  <script>
    // Global toast notification helper using Shoelace native
    function showToast(message, variant = 'primary', icon = 'info-circle', duration = 3000) {
      const alert = Object.assign(document.createElement('sl-alert'), {
        variant: variant,
        closable: true,
        duration: duration,
        style: 'position: fixed; bottom: 1rem; right: 1rem; z-index: 9999; min-width: 300px; max-width: 500px;'
      });

      alert.innerHTML = `
        <sl-icon name="${icon}" slot="icon"></sl-icon>
        ${message}
      `;

      document.body.append(alert);
      alert.toast();
    }

    // Global function to update task count badge
    async function updateTaskCountBadge() {
      try {
        const response = await fetch('/api/tasks/count');
        const data = await response.json();

        if (data.success) {
          const taskLink = document.querySelector('a[href="/tasks"]');
          if (taskLink) {
            let badge = taskLink.querySelector('span.bg-red-500');

            if (data.count > 0) {
              if (badge) {
                badge.textContent = data.count;
              } else {
                const newBadge = document.createElement('span');
                newBadge.className = 'ml-2 bg-red-500 text-white text-xs rounded-full px-2 py-0.5';
                newBadge.textContent = data.count;
                taskLink.appendChild(newBadge);
              }
            } else {
              if (badge) {
                badge.remove();
              }
            }
          }
        }
      } catch (error) {
        console.error('Error updating task count:', error);
      }
    }

    // Socket.IO listener for task updates (if on a page with socket)
    if (typeof io !== 'undefined') {
      const globalSocket = io();
      globalSocket.on('task:created', () => updateTaskCountBadge());
      globalSocket.on('task:updated', () => updateTaskCountBadge());
    }
  </script>

  <script src="/js/app.js"></script>
</body>
</html>
