const Task = require('../models/Task');
const User = require('../models/User');
const emailService = require('../services/emailService');

// @desc    Create a new task manually
// @route   POST /api/tasks
// @access  Private
exports.createTask = async (req, res) => {
  try {
    const { title, snippet, sourceUrl, platform, priority, reasoning, suggestedResponse } = req.body;

    if (!title || !snippet || !sourceUrl) {
      return res.status(400).json({ error: 'Title, snippet, and source URL are required' });
    }

    const task = await Task.create({
      title,
      snippet,
      sourceUrl,
      platform: platform || 'Discord',
      priority: priority || 'medium',
      reasoning,
      suggestedResponse,
      foundByAgent: false,
      metadata: {
        autoGenerated: false
      }
    });

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:created', {
        taskId: task._id.toString()
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Create task error:', error);
    res.status(500).json({ error: 'Error creating task: ' + error.message });
  }
};

// @desc    Get all tasks with filters
// @route   GET /api/tasks
// @access  Private
exports.getTasks = async (req, res) => {
  try {
    const {
      completed,
      priority,
      platform,
      intent,
      limit = 50,
      skip = 0
    } = req.query;

    const query = {};

    // Handle status filter: 'false' = Open (not completed, not skipped), 'true' = Completed, 'skipped' = Skipped
    if (completed === 'false') {
      // Open tasks: not completed AND not skipped (use $ne to handle undefined/null/false)
      query.isCompleted = false;
      query.isSkipped = { $ne: true };
    } else if (completed === 'true') {
      // Completed tasks
      query.isCompleted = true;
    } else if (completed === 'skipped') {
      // Skipped tasks
      query.isSkipped = true;
    }
    // If completed is undefined or empty string, show all tasks

    if (priority) {
      query.priority = priority;
    }

    if (platform) {
      query.platform = platform;
    }

    if (intent) {
      query.intent = intent;
    }

    const tasks = await Task.find(query)
      .sort({ priority: -1, createdAt: -1 })
      .limit(parseInt(limit))
      .skip(parseInt(skip))
      .populate('completedBy', 'name email')
      .populate('delegatedTo', 'name email')
      .populate('skippedBy', 'name email');

    const total = await Task.countDocuments(query);

    res.json({
      success: true,
      count: tasks.length,
      total,
      tasks
    });
  } catch (error) {
    console.error('Get tasks error:', error);
    res.status(500).json({ error: 'Error retrieving tasks' });
  }
};

// @desc    Get uncompleted task count
// @route   GET /api/tasks/count
// @access  Private
exports.getTaskCount = async (req, res) => {
  try {
    // Count only tasks that are not completed AND not skipped
    const count = await Task.countDocuments({
      isCompleted: false,
      $or: [
        { isSkipped: false },
        { isSkipped: { $exists: false } }
      ]
    });

    res.json({
      success: true,
      count
    });
  } catch (error) {
    console.error('Get task count error:', error);
    res.status(500).json({ error: 'Error retrieving task count' });
  }
};

// @desc    Get task statistics
// @route   GET /api/tasks/stats
// @access  Private
exports.getTaskStats = async (req, res) => {
  try {
    // Open count: not completed AND not skipped
    const openCount = await Task.countDocuments({
      isCompleted: false,
      $or: [
        { isSkipped: false },
        { isSkipped: { $exists: false } }
      ]
    });

    // Get completed today count
    const startOfDay = new Date();
    startOfDay.setHours(0, 0, 0, 0);
    const completedTodayCount = await Task.countDocuments({
      isCompleted: true,
      completedAt: { $gte: startOfDay }
    });

    // Get high priority count (only open tasks)
    const highPriorityCount = await Task.countDocuments({
      isCompleted: false,
      $or: [
        { isSkipped: false },
        { isSkipped: { $exists: false } }
      ],
      priority: 'high'
    });

    // Get delegated tasks that are not done
    const delegatedNotDoneCount = await Task.countDocuments({
      delegatedTo: { $exists: true, $ne: null },
      isCompleted: false,
      $or: [
        { isSkipped: false },
        { isSkipped: { $exists: false } }
      ]
    });

    res.json({
      success: true,
      stats: {
        open: openCount,
        completedToday: completedTodayCount,
        highPriority: highPriorityCount,
        delegatedNotDone: delegatedNotDoneCount
      }
    });
  } catch (error) {
    console.error('Get task stats error:', error);
    res.status(500).json({ error: 'Error retrieving task stats' });
  }
};

// @desc    Update a task
// @route   PUT /api/tasks/:id
// @access  Private
exports.updateTask = async (req, res) => {
  try {
    const { title, snippet, sourceUrl, priority, reasoning, suggestedResponse } = req.body;

    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    // Update fields
    if (title) task.title = title;
    if (snippet) task.snippet = snippet;
    if (sourceUrl) task.sourceUrl = sourceUrl;
    if (priority) task.priority = priority;
    if (reasoning !== undefined) task.reasoning = reasoning;
    if (suggestedResponse !== undefined) task.suggestedResponse = suggestedResponse;

    await task.save();

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:updated', {
        taskId: task._id.toString()
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Update task error:', error);
    res.status(500).json({ error: 'Error updating task: ' + error.message });
  }
};

// @desc    Get single task
// @route   GET /api/tasks/:id
// @access  Private
exports.getTask = async (req, res) => {
  try {
    const task = await Task.findById(req.params.id)
      .populate('completedBy', 'name email')
      .populate('delegatedTo', 'name email');

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Get task error:', error);
    res.status(500).json({ error: 'Error retrieving task' });
  }
};

// @desc    Mark task as complete
// @route   PUT /api/tasks/:id/complete
// @access  Private
exports.completeTask = async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    task.isCompleted = true;
    task.completedBy = req.user._id;
    task.completedAt = Date.now();
    await task.save();

    await task.populate('completedBy', 'name email');

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:updated', {
        taskId: task._id.toString(),
        isCompleted: true
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Complete task error:', error);
    res.status(500).json({ error: 'Error completing task' });
  }
};

// @desc    Reopen task
// @route   PUT /api/tasks/:id/reopen
// @access  Private
exports.reopenTask = async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    task.isCompleted = false;
    task.completedBy = undefined;
    task.completedAt = undefined;
    await task.save();

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Reopen task error:', error);
    res.status(500).json({ error: 'Error reopening task' });
  }
};

// @desc    Delete task (admin only)
// @route   DELETE /api/tasks/:id
// @access  Private/Admin
exports.deleteTask = async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    await task.deleteOne();

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:deleted', {
        taskId: task._id.toString()
      });
    }

    res.json({
      success: true,
      message: 'Task deleted'
    });
  } catch (error) {
    console.error('Delete task error:', error);
    res.status(500).json({ error: 'Error deleting task' });
  }
};

// @desc    Update task priority (admin only)
// @route   PUT /api/tasks/:id/priority
// @access  Private/Admin
exports.updatePriority = async (req, res) => {
  try {
    const { priority } = req.body;

    if (!['low', 'medium', 'high'].includes(priority)) {
      return res.status(400).json({ error: 'Invalid priority value' });
    }

    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    task.priority = priority;
    await task.save();

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Update priority error:', error);
    res.status(500).json({ error: 'Error updating task priority' });
  }
};

// @desc    Skip task (reviewed but not engaging)
// @route   PUT /api/tasks/:id/skip
// @access  Private
exports.skipTask = async (req, res) => {
  try {
    const { reason } = req.body;

    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    task.isSkipped = true;
    task.skippedBy = req.user._id;
    task.skippedAt = Date.now();
    if (reason) {
      task.skippedReason = reason;
    }
    await task.save();

    await task.populate('skippedBy', 'name email');

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:updated', {
        taskId: task._id.toString(),
        isSkipped: true
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Skip task error:', error);
    res.status(500).json({ error: 'Error skipping task' });
  }
};

// @desc    Unskip task
// @route   PUT /api/tasks/:id/unskip
// @access  Private
exports.unskipTask = async (req, res) => {
  try {
    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    task.isSkipped = false;
    task.skippedBy = undefined;
    task.skippedAt = undefined;
    task.skippedReason = undefined;
    await task.save();

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:updated', {
        taskId: task._id.toString(),
        isSkipped: false
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Unskip task error:', error);
    res.status(500).json({ error: 'Error unskipping task' });
  }
};

// @desc    Bulk skip multiple tasks
// @route   POST /api/tasks/bulk/skip
// @access  Private
exports.bulkSkipTasks = async (req, res) => {
  try {
    const { taskIds, reason } = req.body;

    if (!taskIds || !Array.isArray(taskIds) || taskIds.length === 0) {
      return res.status(400).json({ error: 'Task IDs array is required' });
    }

    const results = {
      success: [],
      failed: []
    };

    // Process each task
    for (const taskId of taskIds) {
      try {
        const task = await Task.findById(taskId);

        if (!task) {
          results.failed.push({ taskId, error: 'Task not found' });
          continue;
        }

        task.isSkipped = true;
        task.skippedBy = req.user._id;
        task.skippedAt = Date.now();
        if (reason) {
          task.skippedReason = reason;
        }
        await task.save();

        results.success.push(taskId);

        // Emit socket event for real-time update
        if (global.io) {
          global.io.emit('task:updated', {
            taskId: task._id.toString(),
            isSkipped: true
          });
        }
      } catch (error) {
        console.error(`Error skipping task ${taskId}:`, error);
        results.failed.push({ taskId, error: error.message });
      }
    }

    res.json({
      success: true,
      skippedCount: results.success.length,
      failedCount: results.failed.length,
      results
    });
  } catch (error) {
    console.error('Bulk skip error:', error);
    res.status(500).json({ error: 'Error skipping tasks' });
  }
};

// @desc    Delegate task to user
// @route   PUT /api/tasks/:id/delegate
// @access  Private
exports.delegateTask = async (req, res) => {
  try {
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    const task = await Task.findById(req.params.id);
    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    task.delegatedTo = userId;
    task.delegatedAt = Date.now();
    await task.save();

    await task.populate('delegatedTo', 'name email');

    // Send delegation email
    await emailService.sendTaskDelegationEmail(task, user);

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:delegated', {
        taskId: task._id.toString(),
        delegatedTo: {
          _id: user._id,
          name: user.name,
          email: user.email
        }
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Delegate task error:', error);
    res.status(500).json({ error: 'Error delegating task: ' + error.message });
  }
};

// @desc    Update task suggested response
// @route   PATCH /api/tasks/:id/response
// @access  Private
exports.updateSuggestedResponse = async (req, res) => {
  try {
    const { suggestedResponse } = req.body;

    const task = await Task.findById(req.params.id);

    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }

    // Save current version to history before updating
    if (task.suggestedResponse) {
      if (!task.responseVersions) {
        task.responseVersions = [];
      }

      task.responseVersions.push({
        content: task.suggestedResponse,
        savedAt: new Date(),
        versionNumber: task.currentVersion || 1
      });
    }

    // Update to new version
    task.suggestedResponse = suggestedResponse;
    task.currentVersion = (task.currentVersion || 1) + 1;

    await task.save();

    // Emit socket event for real-time update
    if (global.io) {
      global.io.emit('task:updated', {
        taskId: task._id.toString()
      });
    }

    res.json({
      success: true,
      task
    });
  } catch (error) {
    console.error('Update suggested response error:', error);
    res.status(500).json({ error: 'Error updating response: ' + error.message });
  }
};

// @desc    Get all users
// @route   GET /api/users
// @access  Private
exports.getUsers = async (req, res) => {
  try {
    const users = await User.find({}, 'name email role').sort({ name: 1 });

    res.json({
      success: true,
      users
    });
  } catch (error) {
    console.error('Get users error:', error);
    res.status(500).json({ error: 'Error retrieving users' });
  }
};
