const mongoose = require('mongoose');

const claudeConversationSchema = new mongoose.Schema({
  title: { type: String, required: true }, // Auto-generated by Haiku
  question: { type: String, required: true },
  answer: { type: String, required: true },
  analysisDepth: { type: String, enum: ['quick', 'standard', 'deep', 'comprehensive', 'automated'] },
  sourcesAnalyzed: { type: Number, default: 0 },
  sources: [{
    id: String,
    platform: String,
    author: String,
    content: String,
    deeplink: String,
    relevanceScore: Number,
    timestamp: Date
  }],
  filters: {
    platform: String,
    timeRange: String,
    startDate: Date,
    endDate: Date
  },
  options: {
    includePatterns: { type: Boolean, default: false },
    includeTrends: { type: Boolean, default: false }
  },
  usage: {
    inputTokens: Number,
    outputTokens: Number,
    model: String
  },
  log: [{
    message: String,
    detail: String,
    model: String,
    timestamp: Date
  }],
  suggestedTasks: [{
    sourceId: String,
    sourceContent: String,
    sourceDeeplink: String,
    platform: String,
    author: String,
    shouldEngage: Boolean,
    score: Number,
    reasoning: String,
    suggestedResponse: String,
    responseVersions: [{
      content: String,
      savedAt: Date,
      versionNumber: Number
    }],
    currentVersion: { type: Number, default: 1 },
    relevanceScore: Number,
    status: { type: String, enum: ['pending', 'accepted', 'rejected', 'created'], default: 'pending' },
    createdTaskId: { type: mongoose.Schema.Types.ObjectId, ref: 'Task' },
    isDuplicate: { type: Boolean, default: false },
    existingTaskId: { type: mongoose.Schema.Types.ObjectId, ref: 'Task' },
    generatedAt: Date
  }],
  taskGenerationReport: [{
    sourceId: String,
    platform: String,
    author: String,
    contentSnippet: String,
    sourceDeeplink: String,
    score: Number,
    shouldEngage: Boolean,
    reasoning: String,
    isComment: Boolean,
    relevanceScore: Number,
    analyzedAt: Date
  }],
  tasksGeneratedAt: Date,
  tasksGeneratedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  createdAt: { type: Date, default: Date.now },
  isBookmarked: { type: Boolean, default: false },
  backgroundGenerated: { type: Boolean, default: false }
});

// Index for faster queries
claudeConversationSchema.index({ createdAt: -1 });
claudeConversationSchema.index({ createdBy: 1, createdAt: -1 });
claudeConversationSchema.index({ title: 'text', question: 'text' });
claudeConversationSchema.index({ backgroundGenerated: 1 });

module.exports = mongoose.model('ClaudeConversation', claudeConversationSchema);
